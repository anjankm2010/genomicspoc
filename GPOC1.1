{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.77\n"
     ]
    }
   ],
   "source": [
    "import Bio\n",
    "print(Bio.__version__)\n",
    "import os\n",
    "from Bio.Seq import Seq\n",
    "from Bio import SeqIO\n",
    "from Bio.Alphabet import IUPAC\n",
    "from Bio.Alphabet import generic_nucleotide\n",
    "from Bio import Align\n",
    "from Bio.SeqRecord import SeqRecord\n",
    "from Bio.Seq import MutableSeq\n",
    "from Bio.Alphabet import generic_dna\n",
    "import re\n",
    "from Bio import pairwise2\n",
    "from Bio.pairwise2 import format_alignment\n",
    "\n",
    "offsetapplicablepair = 10000000\n",
    "samenesslookahead = 4\n",
    "variantnumber = 10\n",
    "varheadoffset = 0\n",
    "var_seq_record = 0\n",
    "ref_seq_record = SeqIO.read(\"BRCA1-REF.fasta\", \"fasta\")\n",
    "\n",
    "dirpath = 'C:\\\\Users\\\\anjan.DESKTOP-PC5VIV8\\\\GPOC\\\\testfiles\\\\'\n",
    "\n",
    "testfilecount = 0\n",
    "testfilenames = []\n",
    "#reporting section\n",
    "reportlines = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "reportlines.append(\"KAIGENIX CLINICAL MANAGEMENT - GENOMICS REPORT\".center(100))\n",
    "reportlines.append(\"Variation Examination Report\\n\".center(100))\n",
    "\n",
    "reportlines.append(\"Details:\")\n",
    "reportlines.append(\"--------------------------------------------------------------------------------------------------------------------------\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nfor root, dirs, files in os.walk(dirpath):\\n    for filename in files:\\n            print(filename)\\n            testfilecount+=1\\n            testfilenames.append(filename)\\n\\nprint(testfilecount)\\nfor i in range(testfilecount):\\n    print(str(i) + \" -- \" + testfilenames[i])\\n'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "for root, dirs, files in os.walk(dirpath):\n",
    "    for filename in files:\n",
    "            print(filename)\n",
    "            testfilecount+=1\n",
    "            testfilenames.append(filename)\n",
    "\n",
    "print(testfilecount)\n",
    "for i in range(testfilecount):\n",
    "    print(str(i) + \" -- \" + testfilenames[i])\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nfor seq_record in SeqIO.parse(\"BRCA1-REF.fasta\", \"fasta\"):\\n    print(seq_record.id)\\n    print(repr(seq_record.seq))\\n    print(len(seq_record))\\n'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "for seq_record in SeqIO.parse(\"BRCA1-REF.fasta\", \"fasta\"):\n",
    "    print(seq_record.id)\n",
    "    print(repr(seq_record.seq))\n",
    "    print(len(seq_record))\n",
    "'''\n",
    "   \n",
    "#ref_seq_record = SeqIO.read(\"BRCA1-REF.fasta\", \"fasta\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nif variantnumber == 1:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR01.fasta\", \"fasta\")\\nif variantnumber == 2:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR02.fasta\", \"fasta\")\\nif variantnumber == 3:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR03.fasta\", \"fasta\")\\nif variantnumber == 4:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR04.fasta\", \"fasta\")\\nif variantnumber == 5:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR05.fasta\", \"fasta\")\\nif variantnumber == 6:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR06.fasta\", \"fasta\")\\nif variantnumber == 7:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR07.fasta\", \"fasta\")\\nif variantnumber == 8:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR08.fasta\", \"fasta\")\\nif variantnumber == 9:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR09.fasta\", \"fasta\")\\nif variantnumber == 10:\\n    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR10.fasta\", \"fasta\") \\n'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "if variantnumber == 1:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR01.fasta\", \"fasta\")\n",
    "if variantnumber == 2:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR02.fasta\", \"fasta\")\n",
    "if variantnumber == 3:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR03.fasta\", \"fasta\")\n",
    "if variantnumber == 4:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR04.fasta\", \"fasta\")\n",
    "if variantnumber == 5:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR05.fasta\", \"fasta\")\n",
    "if variantnumber == 6:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR06.fasta\", \"fasta\")\n",
    "if variantnumber == 7:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR07.fasta\", \"fasta\")\n",
    "if variantnumber == 8:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR08.fasta\", \"fasta\")\n",
    "if variantnumber == 9:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR09.fasta\", \"fasta\")\n",
    "if variantnumber == 10:\n",
    "    var_seq_record = SeqIO.read(\"P001-BRCA1-VAR10.fasta\", \"fasta\") \n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nprint(var_seq_record.seq[:100])\\nprint(ref_seq_record.seq[:100])\\n'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "print(var_seq_record.seq[:100])\n",
    "print(ref_seq_record.seq[:100])\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def longform(strdiagnosis):\n",
    "    if strdiagnosis == \"BB\": return \"BENIGN\"\n",
    "    if strdiagnosis == \"LB\": return \"LIKELY BENIGN\"\n",
    "    if strdiagnosis == \"PP\": return \"PATHOLOGICAL\"\n",
    "    if strdiagnosis == \"LP\": return \"LIKELY PATHOLOGICAL\"\n",
    "    if strdiagnosis == \"NN\": return \"NOT KNOWN\"\n",
    "    return \"NOT KNOWN\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  sample -- c.0010C>T##BB \n",
    "def verifyvarient1present(variantrule):\n",
    "    print(\"in rule verification 1----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "        \n",
    "    strbeforesubstitution=variantrule[6]\n",
    "    straftersubstitution=variantrule[8]\n",
    "    print(strbeforesubstitution)\n",
    "    print(straftersubstitution)\n",
    "    strdiagnosis = variantrule[11] + variantrule[12]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 1--' + str(varheadoffsetTemp))\n",
    "    print(var_seq_record.seq[start4digitnumber + varheadoffsetTemp])\n",
    "    print(ref_seq_record.seq[start4digitnumber])\n",
    "    if var_seq_record.seq[start4digitnumber + varheadoffsetTemp] == straftersubstitution:\n",
    "        if ref_seq_record.seq[start4digitnumber] == strbeforesubstitution:\n",
    "            reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "            print(variantrule + \"      PRESENT           ******************\")\n",
    "        else:\n",
    "            reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "        \n",
    "    # no change to varheadoffset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  sample -- c.0005_0008del##LB\n",
    "def verifyvarient2present(variantrule):\n",
    "    print(\"in rule verification 2----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "    \n",
    "    strdiagnosis = variantrule[16] + variantrule[17]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 2--' + str(varheadoffsetTemp))\n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    deleted = False\n",
    "    nextdigitssame = True\n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumber+i]\n",
    "        if var_seq_record.seq[start4digitnumber +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumber+i]:\n",
    "            deleted = True\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[start4digitnumber +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment)    \n",
    "\n",
    "    \n",
    "    if deleted == True and nextdigitssame == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        varheadoffset = varheadoffset - difflength\n",
    "        offsetapplicablepair = min(offsetapplicablepair, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0009_0012delTCCT##PP\n",
    "def verifyvarient3present(variantrule):\n",
    "    print(\"in rule verification 3----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "        \n",
    "        #get the string\n",
    "    strdel=''\n",
    "    sequencepointer = 14\n",
    "    while variantrule[sequencepointer] != '#':\n",
    "        strdel = strdel + variantrule[sequencepointer]\n",
    "        sequencepointer += 1\n",
    "    print(strdel)\n",
    "    \n",
    "    sequencepointer += 2\n",
    "    strdiagnosis = variantrule[sequencepointer] + variantrule[sequencepointer+1]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 3--' + str(varheadoffsetTemp))\n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    deleted = False\n",
    "    nextdigitssame = True\n",
    "    rightseqdeleted = True\n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumber+i]\n",
    "        if var_seq_record.seq[start4digitnumber +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumber+i]:\n",
    "            deleted = True\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[start4digitnumber + varheadoffset +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[start4digitnumber +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment)    \n",
    "\n",
    "    \n",
    "    for k in range(difflength):\n",
    "        print('strdel ' + strdel[k])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+k])\n",
    "        if strdel[k] != ref_seq_record.seq[start4digitnumber+k]:\n",
    "            rightseqdeleted = False\n",
    "    \n",
    "    \n",
    "    if deleted == True and rightseqdeleted == True and nextdigitssame == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        varheadoffset = varheadoffset - difflength\n",
    "        varheadoffsetTemp = min(varheadoffsetTemp, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0009_0012dup##LP\n",
    "def verifyvarient4present(variantrule):\n",
    "    print(\"in rule verification 4----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "\n",
    "        \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "        \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "    \n",
    "    strdiagnosis = variantrule[16] + variantrule[17]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 4--' + str(varheadoffsetTemp))\n",
    "    #varheadoffset = 412\n",
    "    \n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    duplicated = True\n",
    "    nextdigitssame = True\n",
    "   \n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + var_seq_record.seq[end4digitnumber+1 + varheadoffsetTemp +i])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[end4digitnumber +1 + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumber+i]\n",
    "        if var_seq_record.seq[end4digitnumber+1 +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumber+i]:\n",
    "            duplicated = False\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[end4digitnumber+difflength+1 + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[end4digitnumber+1+ difflength + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[end4digitnumber+1+difflength +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment)    \n",
    "    \n",
    "    \n",
    "    if duplicated == True and nextdigitssame == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        varheadoffset = varheadoffset + difflength\n",
    "        offsetapplicablepair = min(offsetapplicablepair, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0014_0017dupGACG##NN\n",
    "def verifyvarient5present(variantrule):\n",
    "    print(\"in rule verification 5----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "\n",
    "\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "    \n",
    "    strdup=''\n",
    "    sequencepointer = 14\n",
    "    while variantrule[sequencepointer] != '#':\n",
    "        strdup = strdup + variantrule[sequencepointer]\n",
    "        sequencepointer += 1\n",
    "    print(strdup)\n",
    "    sequencepointer += 2\n",
    "    strdiagnosis = variantrule[sequencepointer] + variantrule[sequencepointer+1]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 5--' + str(varheadoffsetTemp))\n",
    "    \n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    duplicated = True\n",
    "    nextdigitssame = True\n",
    "    correctduplicateseq = True\n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + var_seq_record.seq[end4digitnumber+1 + varheadoffsetTemp +i])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[end4digitnumber +1 + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumber+i]\n",
    "        if var_seq_record.seq[end4digitnumber+1 +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumber+i]:\n",
    "            duplicated = False\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[end4digitnumber+difflength+1 + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[end4digitnumber+1+ difflength + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[end4digitnumber+1+difflength +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment)    \n",
    "    \n",
    "    for k in range(difflength):\n",
    "        print('strdup ' + strdup[k])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+k])\n",
    "        if strdup[k] != ref_seq_record.seq[start4digitnumber+k]:\n",
    "            correctduplicateseq = False\n",
    "            \n",
    "            \n",
    "    if duplicated == True and nextdigitssame == True and correctduplicateseq == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        varheadoffset = varheadoffset + difflength\n",
    "        varheadoffsetTemp = min(varheadoffsetTemp, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    #varheadoffset = 512\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0012_0013insATATAT##BB\n",
    "def verifyvarient6present(variantrule):\n",
    "    print(\"in rule verification 6----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "        \n",
    "    strins=''\n",
    "    sequencepointer = 14\n",
    "    while variantrule[sequencepointer] != '#':\n",
    "        strins = strins + variantrule[sequencepointer]\n",
    "        sequencepointer += 1\n",
    "    print(strins)\n",
    "    lengthstrins = len(strins)\n",
    "    sequencepointer += 2\n",
    "    strdiagnosis = variantrule[sequencepointer] + variantrule[sequencepointer+1]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 6--' + str(varheadoffsetTemp))\n",
    "    \n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    inserted = True\n",
    "    nextdigitssame = True\n",
    "    correctinsertedseq = True\n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(lengthstrins):\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber+1 + varheadoffsetTemp +i])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+1+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[start4digitnumber +1 + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumber+1+i]\n",
    "        if var_seq_record.seq[start4digitnumber+1 +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumber+1+i]:\n",
    "            duplicated = False\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[end4digitnumber+lengthstrins + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[end4digitnumber+ lengthstrins + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+j]\n",
    "        if var_seq_record.seq[end4digitnumber+lengthstrins +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment)    \n",
    "    \n",
    "    for k in range(lengthstrins):\n",
    "        print('strins ' + strins[k])\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber+1+k])\n",
    "        if strins[k] != var_seq_record.seq[start4digitnumber+1+k]:\n",
    "            correctinsertedseq = False\n",
    "            \n",
    "            \n",
    "    if inserted == True and nextdigitssame == True and correctinsertedseq == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        varheadoffset = varheadoffset + difflength\n",
    "        varheadoffsetTemp = min(varheadoffsetTemp, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    #varheadoffset = 512\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0009_0010delinsGGAA##LP\n",
    "def verifyvarient7present(variantrule):\n",
    "    print(\"in rule verification 7----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "        \n",
    "    strdelins=''\n",
    "    sequencepointer = 17\n",
    "    while variantrule[sequencepointer] != '#':\n",
    "        strdelins = strdelins + variantrule[sequencepointer]\n",
    "        sequencepointer += 1\n",
    "    print(strdelins)\n",
    "    lengthstrdelins = len(strdelins)\n",
    "    \n",
    "    sequencepointer += 2\n",
    "    strdiagnosis = variantrule[sequencepointer] + variantrule[sequencepointer+1]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 7--' + str(varheadoffsetTemp))\n",
    "    #varheadoffset = 712\n",
    "    \n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    deleted = False\n",
    "    inserted = True\n",
    "    nextdigitssame = True\n",
    "    correctinsertedseq = True\n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumber+i]\n",
    "        if var_seq_record.seq[start4digitnumber +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumber+i]:\n",
    "            deleted = True\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[start4digitnumber+lengthstrdelins + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[start4digitnumber+ lengthstrdelins + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[start4digitnumber+lengthstrdelins +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment) \n",
    "    \n",
    "    for k in range(lengthstrdelins):\n",
    "        print('strdelins ' + strdelins[k])\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber+k])\n",
    "        if strdelins[k] != var_seq_record.seq[start4digitnumber+k]:\n",
    "            correctinsertedseq = False\n",
    "    \n",
    "             \n",
    "    if deleted == True and nextdigitssame == True and correctinsertedseq == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        varheadoffset = varheadoffset + difflength\n",
    "        varheadoffsetTemp = min(varheadoffsetTemp, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    #varheadoffset = 512\n",
    "   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0009_0010delTCinsGGAA##LP\n",
    "def verifyvarient8present(variantrule):\n",
    "    print(\"in rule verification 8 ----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "    \n",
    "    strdel=''\n",
    "    sequencepointer = 14\n",
    "    char = variantrule[sequencepointer]\n",
    "    print(char)\n",
    "    while ((char != 'I') and (char != 'i')):\n",
    "        strdel = strdel + char\n",
    "        sequencepointer += 1\n",
    "        char = variantrule[sequencepointer]\n",
    "        print(char)\n",
    "    print(strdel)\n",
    "    lengthstrdel = len(strdel)\n",
    "    \n",
    "    strins=''\n",
    "    sequencepointer += 3\n",
    "    while variantrule[sequencepointer] != '#':\n",
    "        strins = strins + variantrule[sequencepointer]\n",
    "        sequencepointer += 1\n",
    "    print(strins)\n",
    "    lengthstrins = len(strins)\n",
    "    \n",
    "    sequencepointer += 2\n",
    "    strdiagnosis = variantrule[sequencepointer] + variantrule[sequencepointer+1]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 8--' + str(varheadoffsetTemp))\n",
    "    #varheadoffset = 712\n",
    "    \n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    deleted = False\n",
    "    inserted = True\n",
    "    nextdigitssame = True\n",
    "    correctdeletedseq = True\n",
    "    correctinsertedseq = True\n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumber+i]\n",
    "        if var_seq_record.seq[start4digitnumber +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumber+i]:\n",
    "            deleted = True\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[start4digitnumber+lengthstrins + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[start4digitnumber+ lengthstrins + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[start4digitnumber+lengthstrins +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment) \n",
    "    \n",
    "    for k in range(lengthstrdel):\n",
    "        print('strdel ' + strdel[k])\n",
    "        print('ref ' + ref_seq_record.seq[start4digitnumber+k])\n",
    "        if strdel[k] != ref_seq_record.seq[start4digitnumber+k]:\n",
    "            correctdeletedseq = False\n",
    "    \n",
    "    for l in range(lengthstrins):\n",
    "        print('strins ' + strins[l])\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber+l])\n",
    "        if strins[l] != var_seq_record.seq[start4digitnumber+l]:\n",
    "            correctinsertedseq = False\n",
    "    \n",
    "             \n",
    "    if deleted == True and nextdigitssame == True and correctinsertedseq == True and correctdeletedseq == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        varheadoffset = varheadoffset + difflength\n",
    "        varheadoffsetTemp = min(varheadoffsetTemp, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    #varheadoffset = 512\n",
    "   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0021_0039inv##PP\n",
    "def verifyvarient9present(variantrule):\n",
    "    #c.0021_0039inv##PP\n",
    "    print(\"in rule verification 9 ----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "    #feature_seq = example_parent[example_feature.location.start:example_feature.location.end].reverse_complement()\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "    \n",
    "\n",
    "    sequencepointer = 16\n",
    "    strdiagnosis = variantrule[sequencepointer] + variantrule[sequencepointer+1]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 9--' + str(varheadoffsetTemp))\n",
    "    \n",
    "    \n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    \n",
    "    isinverted = True\n",
    "    \n",
    "    nextdigitssame = True\n",
    "\n",
    "    invertedseq = var_seq_record.seq[start4digitnumber+varheadoffsetTemp:end4digitnumber+varheadoffsetTemp+1]\n",
    "    \n",
    "    correspondingrefseq = ref_seq_record.seq[start4digitnumber:end4digitnumber+1]\n",
    "    \n",
    "    \n",
    "    print(invertedseq)\n",
    "    originalseqfromvarseq = invertedseq.reverse_complement()\n",
    "    print(originalseqfromvarseq)\n",
    "    \n",
    "    print(correspondingrefseq)\n",
    "    \n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + originalseqfromvarseq[i])\n",
    "        print('ref ' + correspondingrefseq[i])\n",
    "        if originalseqfromvarseq[i] != correspondingrefseq[i]:\n",
    "            isinverted = False\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[start4digitnumber+difflength + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[start4digitnumber+ difflength + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[start4digitnumber+difflength +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment) \n",
    "    \n",
    "             \n",
    "    if isinverted == True and nextdigitssame == True :\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        #varheadoffset = varheadoffset + difflength ---commented, no change in length of the sequence due to the variation\n",
    "        varheadoffsetTemp = min(varheadoffsetTemp, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample -- c.0021_0039con0061_0079##LP\n",
    "def verifyvarient10present(variantrule):\n",
    "    print(\"in rule verification 10 ----------------------\" + variantrule)\n",
    "    global varheadoffset\n",
    "    global offsetapplicablepair\n",
    "    global var_seq_record\n",
    "    global ref_seq_record\n",
    "   \n",
    "    #c.0021_0039con0061_0079##LP\n",
    "    \n",
    "    start4digitnumber = int(variantrule[2])*1000 + int(variantrule[3])*100 + int(variantrule[4])*10 + int(variantrule[5])*1\n",
    "    print(start4digitnumber)\n",
    "    end4digitnumber = int(variantrule[7])*1000 + int(variantrule[8])*100 + int(variantrule[9])*10 + int(variantrule[10])*1\n",
    "    print(end4digitnumber)\n",
    "    \n",
    "    if offsetapplicablepair < start4digitnumber:\n",
    "        varheadoffsetTemp = varheadoffset\n",
    "    else:\n",
    "        varheadoffsetTemp = 0\n",
    "    \n",
    "    start4digitnumbercon = int(variantrule[14])*1000 + int(variantrule[14])*100 + int(variantrule[16])*10 + int(variantrule[17])*1\n",
    "    print(start4digitnumbercon)\n",
    "    end4digitnumbercon = int(variantrule[19])*1000 + int(variantrule[20])*100 + int(variantrule[21])*10 + int(variantrule[22])*1\n",
    "    print(end4digitnumbercon)\n",
    "\n",
    "    sequencepointer = 25\n",
    "    strdiagnosis = variantrule[sequencepointer] + variantrule[sequencepointer+1]\n",
    "    print(strdiagnosis)\n",
    "    print('var head offset 10--' + str(varheadoffsetTemp))\n",
    "    \n",
    "    print(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\")\n",
    "    \n",
    "    islengthsame = False\n",
    "    isconverted = True\n",
    "    nextdigitssame = True\n",
    "    \n",
    "    difflength = end4digitnumber - start4digitnumber +1\n",
    "    print(difflength)\n",
    "    difflengthcon = end4digitnumbercon - start4digitnumbercon +1\n",
    "    print(difflengthcon)\n",
    "    if difflength == difflengthcon:\n",
    "        islengthsame = True\n",
    "    \n",
    "    strvarsegment = \"\"\n",
    "    strrefsegment = \"\"\n",
    "    for i in range(difflength):\n",
    "        print('var ' + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i])\n",
    "        print('refcon ' + ref_seq_record.seq[start4digitnumbercon+i])\n",
    "        strvarsegment = strvarsegment + var_seq_record.seq[start4digitnumber + varheadoffsetTemp +i]\n",
    "        strrefsegment = strrefsegment + ref_seq_record.seq[start4digitnumbercon+i]\n",
    "        if var_seq_record.seq[start4digitnumber +varheadoffsetTemp +i] != ref_seq_record.seq[start4digitnumbercon+i]:\n",
    "            isconverted = False\n",
    "    print('strvarsegment ' + strvarsegment)\n",
    "    print('strrefsegment ' + strrefsegment)\n",
    "    \n",
    "    \n",
    "    strnextvarsegment = \"\"\n",
    "    strnextrefsegment = \"\"\n",
    "    for j in range(samenesslookahead):\n",
    "        print('var next ' + var_seq_record.seq[start4digitnumber+difflength + varheadoffsetTemp +j])\n",
    "        print('ref next ' + ref_seq_record.seq[end4digitnumber+1+j])\n",
    "        strnextvarsegment = strnextvarsegment + var_seq_record.seq[start4digitnumber+ difflength + varheadoffsetTemp +j]\n",
    "        strnextrefsegment = strnextrefsegment + ref_seq_record.seq[end4digitnumber+1+j]\n",
    "        if var_seq_record.seq[start4digitnumber+difflength +varheadoffsetTemp +j] != ref_seq_record.seq[end4digitnumber+1+j]:\n",
    "            nextdigitssame = False\n",
    "    print('strnextvarsegment ' + strnextvarsegment)\n",
    "    print('strnextrefsegment ' + strnextrefsegment) \n",
    "    \n",
    "             \n",
    "    if isconverted == True and nextdigitssame == True and islengthsame == True:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- PRESENT    \".ljust(30) + \" Diagnosis: \" + longform(strdiagnosis) )\n",
    "        print(variantrule + \"      PRESENT           ******************\")\n",
    "        #varheadoffset = varheadoffset + difflength ---commented, no change in length of the sequence due to the variation\n",
    "        varheadoffsetTemp = min(varheadoffsetTemp, start4digitnumber)\n",
    "    else:\n",
    "        reportlines.append(\"VARIANT -- \" + variantrule.ljust(40) + \" -- NOT PRESENT\".ljust(30) + \" Diagnosis: N/A\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "def checkvariantexists(variantnumber, variantrule ):\n",
    "    #print(variantnumber)\n",
    "    #print(variantrule)\n",
    "    match = 0\n",
    "    matchObj1 = re.match( r'c\\.\\d\\d\\d\\d[a-zA-Z]>[a-zA-Z]##', variantrule)\n",
    "    if matchObj1:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 1')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient1present(variantrule)\n",
    "        \n",
    "    matchObj2 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Dd][Ee][Ll]##', variantrule)\n",
    "    if matchObj2:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 2')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient2present(variantrule)\n",
    "        \n",
    "    matchObj3 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Dd][Ee][Ll][atgcATGC]+##', variantrule)\n",
    "    if matchObj3:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 3')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient3present(variantrule)\n",
    "        \n",
    "    matchObj4 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Dd][Uu][Pp]##', variantrule)\n",
    "    if matchObj4:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 4')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient4present(variantrule)\n",
    "        \n",
    "    matchObj5 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Dd][Uu][Pp][atgcATGC]+##', variantrule)\n",
    "    if matchObj5:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 5')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient5present(variantrule)\n",
    "        \n",
    "    matchObj6 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Ii][Nn][Ss][atgcATGC]+##', variantrule)\n",
    "    if matchObj6:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 6')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient6present(variantrule)\n",
    "        \n",
    "    matchObj7 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Dd][Ee][Ll][Ii][Nn][Ss][atgcATGC]+##', variantrule)\n",
    "    if matchObj7:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 7')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient7present(variantrule)\n",
    "        \n",
    "    matchObj8 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Dd][Ee][Ll][atgcATGC]+[Ii][Nn][Ss][atgcATGC]+##', variantrule)\n",
    "    if matchObj8:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 8')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient8present(variantrule)\n",
    "    \n",
    "    #0021_0039inv##PP\n",
    "    matchObj9 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Ii][Nn][Vv]##', variantrule)\n",
    "    if matchObj9:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 9')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient9present(variantrule)\n",
    "        \n",
    "    matchObj10 = re.match( r'c\\.\\d\\d\\d\\d_\\d\\d\\d\\d[Cc][Oo][Nn]\\d\\d\\d\\d_\\d\\d\\d\\d##', variantrule)\n",
    "    if matchObj10:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- matched 10')\n",
    "        match = 1\n",
    "        isvarientpresent = verifyvarient10present(variantrule)\n",
    "        \n",
    "    if match == 0:\n",
    "        print('\\n\\n Variant#' + str(variantnumber)+' Variant:'+variantrule + ' --- NO MATCHING RULE FOUND!!!!!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nprint(var_seq_record.seq[:100])\\nprint(ref_seq_record.seq[:100])\\n'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "print(var_seq_record.seq[:100])\n",
    "print(ref_seq_record.seq[:100])\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P002-BRCA1-VAR03.fasta\n",
      "P002-BRCA1-VAR05.fasta\n",
      "2\n",
      "0 -- P002-BRCA1-VAR03.fasta\n",
      "\n",
      "\n",
      " Variant#1 Variant:c.0010C>T##BB --- matched 1\n",
      "in rule verification 1----------------------c.0010C>T##BB\n",
      "10\n",
      "C\n",
      "T\n",
      "BB\n",
      "var head offset 1--0\n",
      "C\n",
      "C\n",
      "\n",
      "\n",
      " Variant#2 Variant:c.0005_0008del##LB --- matched 2\n",
      "in rule verification 2----------------------c.0005_0008del##LB\n",
      "5\n",
      "8\n",
      "LB\n",
      "var head offset 2--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var T\n",
      "ref T\n",
      "strvarsegment GACT\n",
      "strrefsegment GACT\n",
      "var next G\n",
      "ref next T\n",
      "var next A\n",
      "ref next C\n",
      "var next C\n",
      "ref next C\n",
      "var next T\n",
      "ref next T\n",
      "strnextvarsegment GACT\n",
      "strnextrefsegment TCCT\n",
      "\n",
      "\n",
      " Variant#3 Variant:c.0009_0012delTCCT##PP --- matched 3\n",
      "in rule verification 3----------------------c.0009_0012delTCCT##PP\n",
      "9\n",
      "12\n",
      "TCCT\n",
      "PP\n",
      "var head offset 3--0\n",
      "4\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "var C\n",
      "ref C\n",
      "var T\n",
      "ref T\n",
      "strvarsegment TCCT\n",
      "strrefsegment TCCT\n",
      "var next T\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next C\n",
      "ref next A\n",
      "var next T\n",
      "ref next C\n",
      "strnextvarsegment TCCT\n",
      "strnextrefsegment GGAC\n",
      "strdel T\n",
      "ref T\n",
      "strdel C\n",
      "ref C\n",
      "strdel C\n",
      "ref C\n",
      "strdel T\n",
      "ref T\n",
      "\n",
      "\n",
      " Variant#4 Variant:c.0009_0012dup##LP --- matched 4\n",
      "in rule verification 4----------------------c.0009_0012dup##LP\n",
      "9\n",
      "12\n",
      "LP\n",
      "var head offset 4--0\n",
      "4\n",
      "var G\n",
      "ref T\n",
      "var G\n",
      "ref C\n",
      "var A\n",
      "ref C\n",
      "var C\n",
      "ref T\n",
      "strvarsegment GGAC\n",
      "strrefsegment TCCT\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next C\n",
      "ref next A\n",
      "var next A\n",
      "ref next C\n",
      "strnextvarsegment GGCA\n",
      "strnextrefsegment GGAC\n",
      "\n",
      "\n",
      " Variant#5 Variant:c.0014_0017dupGACG##NN --- matched 5\n",
      "in rule verification 5----------------------c.0014_0017dupGACG##NN\n",
      "14\n",
      "17\n",
      "GACG\n",
      "NN\n",
      "var head offset 5--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var C\n",
      "ref A\n",
      "var A\n",
      "ref C\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GCAG\n",
      "strrefsegment GACG\n",
      "var next G\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "strnextvarsegment GCTG\n",
      "strnextrefsegment GGGG\n",
      "strdup G\n",
      "ref G\n",
      "strdup A\n",
      "ref A\n",
      "strdup C\n",
      "ref C\n",
      "strdup G\n",
      "ref G\n",
      "\n",
      "\n",
      " Variant#6 Variant:c.0012_0013insATATAT##BB --- matched 6\n",
      "in rule verification 6----------------------c.0012_0013insATATAT##BB\n",
      "12\n",
      "13\n",
      "ATATAT\n",
      "BB\n",
      "var head offset 6--0\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GGACGG\n",
      "strrefsegment GGACGG\n",
      "var next C\n",
      "ref next G\n",
      "var next A\n",
      "ref next G\n",
      "var next G\n",
      "ref next A\n",
      "var next G\n",
      "ref next C\n",
      "strnextvarsegment CAGG\n",
      "strnextrefsegment GGAC\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "strins A\n",
      "var A\n",
      "strins T\n",
      "var C\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "\n",
      "\n",
      " Variant#7 Variant:c.0009_0010delinsGGAA##LP --- matched 7\n",
      "in rule verification 7----------------------c.0009_0010delinsGGAA##LP\n",
      "9\n",
      "10\n",
      "GGAA\n",
      "LP\n",
      "var head offset 7--0\n",
      "2\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "strvarsegment TC\n",
      "strrefsegment TC\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next T\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "strnextvarsegment GGAC\n",
      "strnextrefsegment CTGG\n",
      "strdelins G\n",
      "var T\n",
      "strdelins G\n",
      "var C\n",
      "strdelins A\n",
      "var C\n",
      "strdelins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#8 Variant:c.0009_0010delTCinsGGAA##LP --- matched 8\n",
      "in rule verification 8 ----------------------c.0009_0010delTCinsGGAA##LP\n",
      "9\n",
      "10\n",
      "T\n",
      "C\n",
      "i\n",
      "TC\n",
      "GGAA\n",
      "LP\n",
      "var head offset 8--0\n",
      "2\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "strvarsegment TC\n",
      "strrefsegment TC\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next T\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "strnextvarsegment GGAC\n",
      "strnextrefsegment CTGG\n",
      "strdel T\n",
      "ref T\n",
      "strdel C\n",
      "ref C\n",
      "strins G\n",
      "var T\n",
      "strins G\n",
      "var C\n",
      "strins A\n",
      "var C\n",
      "strins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#9 Variant:c.0021_0039inv##PP --- matched 9\n",
      "in rule verification 9 ----------------------c.0021_0039inv##PP\n",
      "21\n",
      "39\n",
      "PP\n",
      "var head offset 9--0\n",
      "19\n",
      "GGCTGTGGGGTTTCTCAGA\n",
      "TCTGAGAAACCCCACAGCC\n",
      "GACAGGCTGTGGGGTTTCT\n",
      "var T\n",
      "ref G\n",
      "var C\n",
      "ref A\n",
      "var T\n",
      "ref C\n",
      "var G\n",
      "ref A\n",
      "var A\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var A\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "var A\n",
      "ref G\n",
      "var C\n",
      "ref T\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var A\n",
      "ref G\n",
      "var C\n",
      "ref T\n",
      "var A\n",
      "ref T\n",
      "var G\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "var C\n",
      "ref T\n",
      "strvarsegment \n",
      "strrefsegment \n",
      "var next T\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next A\n",
      "strnextvarsegment TAAC\n",
      "strnextrefsegment CAGA\n",
      "\n",
      "\n",
      " Variant#10 Variant:c.0021_0039con0061_0079##LP --- matched 10\n",
      "in rule verification 10 ----------------------c.0021_0039con0061_0079##LP\n",
      "21\n",
      "39\n",
      "61\n",
      "79\n",
      "LP\n",
      "var head offset 10--0\n",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n",
      "19\n",
      "19\n",
      "var G\n",
      "refcon T\n",
      "var G\n",
      "refcon C\n",
      "var C\n",
      "refcon A\n",
      "var T\n",
      "refcon G\n",
      "var G\n",
      "refcon G\n",
      "var T\n",
      "refcon A\n",
      "var G\n",
      "refcon G\n",
      "var G\n",
      "refcon G\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var T\n",
      "refcon T\n",
      "var T\n",
      "refcon T\n",
      "var T\n",
      "refcon C\n",
      "var C\n",
      "refcon A\n",
      "var T\n",
      "refcon C\n",
      "var C\n",
      "refcon C\n",
      "var A\n",
      "refcon C\n",
      "var G\n",
      "refcon T\n",
      "var A\n",
      "refcon C\n",
      "strvarsegment GGCTGTGGGGTTTCTCAGA\n",
      "strrefsegment TCAGGAGGCCTTCACCCTC\n",
      "var next T\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next A\n",
      "strnextvarsegment TAAC\n",
      "strnextrefsegment CAGA\n",
      "\n",
      "\n",
      " Variant#11 Variant:c.0020G>T##BB --- matched 1\n",
      "in rule verification 1----------------------c.0020G>T##BB\n",
      "20\n",
      "G\n",
      "T\n",
      "BB\n",
      "var head offset 1--0\n",
      "A\n",
      "G\n",
      "\n",
      "\n",
      " Variant#12 Variant:c.0015_0018del##LB --- matched 2\n",
      "in rule verification 2----------------------c.0015_0018del##LB\n",
      "15\n",
      "18\n",
      "LB\n",
      "var head offset 2--0\n",
      "4\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment ACGG\n",
      "strrefsegment ACGG\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next A\n",
      "strnextvarsegment ACGG\n",
      "strnextrefsegment GGGA\n",
      "\n",
      "\n",
      " Variant#13 Variant:c.0019_0022delGGGA##PP --- matched 3\n",
      "in rule verification 3----------------------c.0019_0022delGGGA##PP\n",
      "19\n",
      "22\n",
      "GGGA\n",
      "PP\n",
      "var head offset 3--0\n",
      "4\n",
      "var C\n",
      "ref G\n",
      "var A\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref A\n",
      "strvarsegment CAGG\n",
      "strrefsegment GGGA\n",
      "var next C\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "strnextvarsegment CAGG\n",
      "strnextrefsegment CAGG\n",
      "strdel G\n",
      "ref G\n",
      "strdel G\n",
      "ref G\n",
      "strdel G\n",
      "ref G\n",
      "strdel A\n",
      "ref A\n",
      "c.0019_0022delGGGA##PP      PRESENT           ******************\n",
      "\n",
      "\n",
      " Variant#14 Variant:c.0019_0022dup##LP --- matched 4\n",
      "in rule verification 4----------------------c.0019_0022dup##LP\n",
      "19\n",
      "22\n",
      "LP\n",
      "var head offset 4--0\n",
      "4\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref A\n",
      "strvarsegment CTGT\n",
      "strrefsegment GGGA\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next A\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "strnextvarsegment GGGG\n",
      "strnextrefsegment CAGG\n",
      "\n",
      "\n",
      " Variant#15 Variant:c.0024_0027dupGACG##NN --- matched 5\n",
      "in rule verification 5----------------------c.0024_0027dupGACG##NN\n",
      "24\n",
      "27\n",
      "GACG\n",
      "NN\n",
      "var head offset 5--0\n",
      "4\n",
      "var G\n",
      "ref A\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref C\n",
      "strvarsegment GGGT\n",
      "strrefsegment AGGC\n",
      "var next T\n",
      "ref next T\n",
      "var next T\n",
      "ref next G\n",
      "var next C\n",
      "ref next T\n",
      "var next T\n",
      "ref next G\n",
      "strnextvarsegment TTCT\n",
      "strnextrefsegment TGTG\n",
      "strdup G\n",
      "ref A\n",
      "strdup A\n",
      "ref G\n",
      "strdup C\n",
      "ref G\n",
      "strdup G\n",
      "ref C\n",
      "\n",
      "\n",
      " Variant#16 Variant:c.0022_0023insATATAT##BB --- matched 6\n",
      "in rule verification 6----------------------c.0022_0023insATATAT##BB\n",
      "22\n",
      "23\n",
      "ATATAT\n",
      "BB\n",
      "var head offset 6--0\n",
      "2\n",
      "var C\n",
      "ref C\n",
      "var T\n",
      "ref A\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref G\n",
      "var G\n",
      "ref C\n",
      "var G\n",
      "ref T\n",
      "strvarsegment CTGTGG\n",
      "strrefsegment CAGGCT\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next A\n",
      "var next T\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "strnextvarsegment GGTT\n",
      "strnextrefsegment CAGG\n",
      "strins A\n",
      "var C\n",
      "strins T\n",
      "var T\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var T\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "\n",
      "\n",
      " Variant#17 Variant:c.0019_0020delinsGGAA##LP --- matched 7\n",
      "in rule verification 7----------------------c.0019_0020delinsGGAA##LP\n",
      "19\n",
      "20\n",
      "GGAA\n",
      "LP\n",
      "var head offset 7--0\n",
      "2\n",
      "var C\n",
      "ref G\n",
      "var A\n",
      "ref G\n",
      "strvarsegment CA\n",
      "strrefsegment GG\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next A\n",
      "var next G\n",
      "ref next C\n",
      "var next T\n",
      "ref next A\n",
      "strnextvarsegment CTGT\n",
      "strnextrefsegment GACA\n",
      "strdelins G\n",
      "var C\n",
      "strdelins G\n",
      "var A\n",
      "strdelins A\n",
      "var G\n",
      "strdelins A\n",
      "var G\n",
      "\n",
      "\n",
      " Variant#18 Variant:c.0019_0020delTCinsGGAA##LP --- matched 8\n",
      "in rule verification 8 ----------------------c.0019_0020delTCinsGGAA##LP\n",
      "19\n",
      "20\n",
      "T\n",
      "C\n",
      "i\n",
      "TC\n",
      "GGAA\n",
      "LP\n",
      "var head offset 8--0\n",
      "2\n",
      "var C\n",
      "ref G\n",
      "var A\n",
      "ref G\n",
      "strvarsegment CA\n",
      "strrefsegment GG\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next A\n",
      "var next G\n",
      "ref next C\n",
      "var next T\n",
      "ref next A\n",
      "strnextvarsegment CTGT\n",
      "strnextrefsegment GACA\n",
      "strdel T\n",
      "ref G\n",
      "strdel C\n",
      "ref G\n",
      "strins G\n",
      "var C\n",
      "strins G\n",
      "var A\n",
      "strins A\n",
      "var G\n",
      "strins A\n",
      "var G\n",
      "\n",
      "\n",
      " Variant#19 Variant:c.0031_0049inv##PP --- matched 9\n",
      "in rule verification 9 ----------------------c.0031_0049inv##PP\n",
      "31\n",
      "49\n",
      "PP\n",
      "var head offset 9--0\n",
      "19\n",
      "TTTCTCAGATAACTGGGCC\n",
      "GGCCCAGTTATCTGAGAAA\n",
      "GGGGTTTCTCAGATAACTG\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref T\n",
      "var A\n",
      "ref T\n",
      "var G\n",
      "ref T\n",
      "var T\n",
      "ref C\n",
      "var T\n",
      "ref T\n",
      "var A\n",
      "ref C\n",
      "var T\n",
      "ref A\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref A\n",
      "var G\n",
      "ref T\n",
      "var A\n",
      "ref A\n",
      "var G\n",
      "ref A\n",
      "var A\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "var A\n",
      "ref G\n",
      "strvarsegment \n",
      "strrefsegment \n",
      "var next C\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next C\n",
      "var next G\n",
      "ref next C\n",
      "strnextvarsegment CCTG\n",
      "strnextrefsegment GGCC\n",
      "\n",
      "\n",
      " Variant#20 Variant:c.0031_0049con0061_0079##LP --- matched 10\n",
      "in rule verification 10 ----------------------c.0031_0049con0061_0079##LP\n",
      "31\n",
      "49\n",
      "61\n",
      "79\n",
      "LP\n",
      "var head offset 10--0\n",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n",
      "19\n",
      "19\n",
      "var T\n",
      "refcon T\n",
      "var T\n",
      "refcon C\n",
      "var T\n",
      "refcon A\n",
      "var C\n",
      "refcon G\n",
      "var T\n",
      "refcon G\n",
      "var C\n",
      "refcon A\n",
      "var A\n",
      "refcon G\n",
      "var G\n",
      "refcon G\n",
      "var A\n",
      "refcon C\n",
      "var T\n",
      "refcon C\n",
      "var A\n",
      "refcon T\n",
      "var A\n",
      "refcon T\n",
      "var C\n",
      "refcon C\n",
      "var T\n",
      "refcon A\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var C\n",
      "refcon T\n",
      "var C\n",
      "refcon C\n",
      "strvarsegment TTTCTCAGATAACTGGGCC\n",
      "strrefsegment TCAGGAGGCCTTCACCCTC\n",
      "var next C\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next C\n",
      "var next G\n",
      "ref next C\n",
      "strnextvarsegment CCTG\n",
      "strnextrefsegment GGCC\n",
      "\n",
      "\n",
      " Variant#21 Variant:c.0030C>T##BB --- matched 1\n",
      "in rule verification 1----------------------c.0030C>T##BB\n",
      "30\n",
      "C\n",
      "T\n",
      "BB\n",
      "var head offset 1--0\n",
      "G\n",
      "T\n",
      "\n",
      "\n",
      " Variant#22 Variant:c.0025_0028del##LB --- matched 2\n",
      "in rule verification 2----------------------c.0025_0028del##LB\n",
      "25\n",
      "28\n",
      "LB\n",
      "var head offset 2--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref G\n",
      "var G\n",
      "ref C\n",
      "var G\n",
      "ref T\n",
      "strvarsegment GTGG\n",
      "strrefsegment GGCT\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next T\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "strnextvarsegment GTGG\n",
      "strnextrefsegment GTGG\n",
      "c.0025_0028del##LB      PRESENT           ******************\n",
      "\n",
      "\n",
      " Variant#23 Variant:c.0029_0032delTCCT##PP --- matched 3\n",
      "in rule verification 3----------------------c.0029_0032delTCCT##PP\n",
      "29\n",
      "32\n",
      "TCCT\n",
      "PP\n",
      "var head offset 3---8\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref T\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref G\n",
      "strvarsegment GGCT\n",
      "strrefsegment GTGG\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next C\n",
      "ref next T\n",
      "var next T\n",
      "ref next T\n",
      "strnextvarsegment GGCT\n",
      "strnextrefsegment GGTT\n",
      "strdel T\n",
      "ref G\n",
      "strdel C\n",
      "ref T\n",
      "strdel C\n",
      "ref G\n",
      "strdel T\n",
      "ref G\n",
      "\n",
      "\n",
      " Variant#24 Variant:c.0029_0032dup##LP --- matched 4\n",
      "in rule verification 4----------------------c.0029_0032dup##LP\n",
      "29\n",
      "32\n",
      "LP\n",
      "var head offset 4---8\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GTGG\n",
      "strrefsegment GTGG\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next T\n",
      "var next T\n",
      "ref next T\n",
      "strnextvarsegment GGTT\n",
      "strnextrefsegment GGTT\n",
      "c.0029_0032dup##LP      PRESENT           ******************\n",
      "\n",
      "\n",
      " Variant#25 Variant:c.0034_0037dupGACG##NN --- matched 5\n",
      "in rule verification 5----------------------c.0034_0037dupGACG##NN\n",
      "34\n",
      "37\n",
      "GACG\n",
      "NN\n",
      "var head offset 5---4\n",
      "4\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref T\n",
      "var A\n",
      "ref T\n",
      "strvarsegment CTCA\n",
      "strrefsegment GTTT\n",
      "var next G\n",
      "ref next C\n",
      "var next A\n",
      "ref next T\n",
      "var next T\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "strnextvarsegment GATA\n",
      "strnextrefsegment CTCA\n",
      "strdup G\n",
      "ref G\n",
      "strdup A\n",
      "ref T\n",
      "strdup C\n",
      "ref T\n",
      "strdup G\n",
      "ref T\n",
      "\n",
      "\n",
      " Variant#26 Variant:c.0032_0033insATATAT##BB --- matched 6\n",
      "in rule verification 6----------------------c.0032_0033insATATAT##BB\n",
      "32\n",
      "33\n",
      "ATATAT\n",
      "BB\n",
      "var head offset 6---4\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var T\n",
      "ref T\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "strvarsegment GGTTTC\n",
      "strrefsegment GGTTTC\n",
      "var next T\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next A\n",
      "ref next T\n",
      "var next G\n",
      "ref next T\n",
      "strnextvarsegment TCAG\n",
      "strnextrefsegment GGTT\n",
      "strins A\n",
      "var T\n",
      "strins T\n",
      "var C\n",
      "strins A\n",
      "var T\n",
      "strins T\n",
      "var C\n",
      "strins A\n",
      "var A\n",
      "strins T\n",
      "var G\n",
      "\n",
      "\n",
      " Variant#27 Variant:c.0029_0030delinsGGAA##LP --- matched 7\n",
      "in rule verification 7----------------------c.0029_0030delinsGGAA##LP\n",
      "29\n",
      "30\n",
      "GGAA\n",
      "LP\n",
      "var head offset 7---4\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "strvarsegment GT\n",
      "strrefsegment GT\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "strnextvarsegment GGTT\n",
      "strnextrefsegment GGGG\n",
      "strdelins G\n",
      "var G\n",
      "strdelins G\n",
      "var G\n",
      "strdelins A\n",
      "var T\n",
      "strdelins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#28 Variant:c.0029_0030delTCinsGGAA##LP --- matched 8\n",
      "in rule verification 8 ----------------------c.0029_0030delTCinsGGAA##LP\n",
      "29\n",
      "30\n",
      "T\n",
      "C\n",
      "i\n",
      "TC\n",
      "GGAA\n",
      "LP\n",
      "var head offset 8---4\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "strvarsegment GT\n",
      "strrefsegment GT\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "strnextvarsegment GGTT\n",
      "strnextrefsegment GGGG\n",
      "strdel T\n",
      "ref G\n",
      "strdel C\n",
      "ref T\n",
      "strins G\n",
      "var G\n",
      "strins G\n",
      "var G\n",
      "strins A\n",
      "var T\n",
      "strins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#29 Variant:c.0041_0059inv##PP --- matched 9\n",
      "in rule verification 9 ----------------------c.0041_0059inv##PP\n",
      "41\n",
      "59\n",
      "PP\n",
      "var head offset 9---4\n",
      "19\n",
      "AGATAACTGGGCCCCTGCG\n",
      "CGCAGGGGCCCAGTTATCT\n",
      "AGATAACTGGGCCCCTGCG\n",
      "var C\n",
      "ref A\n",
      "var G\n",
      "ref G\n",
      "var C\n",
      "ref A\n",
      "var A\n",
      "ref T\n",
      "var G\n",
      "ref A\n",
      "var G\n",
      "ref A\n",
      "var G\n",
      "ref C\n",
      "var G\n",
      "ref T\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var A\n",
      "ref C\n",
      "var G\n",
      "ref C\n",
      "var T\n",
      "ref C\n",
      "var T\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "var T\n",
      "ref G\n",
      "var C\n",
      "ref C\n",
      "var T\n",
      "ref G\n",
      "strvarsegment \n",
      "strrefsegment \n",
      "var next C\n",
      "ref next C\n",
      "var next T\n",
      "ref next T\n",
      "var next C\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "strnextvarsegment CTCA\n",
      "strnextrefsegment CTCA\n",
      "\n",
      "\n",
      " Variant#30 Variant:c.0041_0059con0061_0079##LP --- matched 10\n",
      "in rule verification 10 ----------------------c.0041_0059con0061_0079##LP\n",
      "41\n",
      "59\n",
      "61\n",
      "79\n",
      "LP\n",
      "var head offset 10---4\n",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n",
      "19\n",
      "19\n",
      "var A\n",
      "refcon T\n",
      "var G\n",
      "refcon C\n",
      "var A\n",
      "refcon A\n",
      "var T\n",
      "refcon G\n",
      "var A\n",
      "refcon G\n",
      "var A\n",
      "refcon A\n",
      "var C\n",
      "refcon G\n",
      "var T\n",
      "refcon G\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon T\n",
      "var C\n",
      "refcon T\n",
      "var C\n",
      "refcon C\n",
      "var C\n",
      "refcon A\n",
      "var C\n",
      "refcon C\n",
      "var T\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var C\n",
      "refcon T\n",
      "var G\n",
      "refcon C\n",
      "strvarsegment AGATAACTGGGCCCCTGCG\n",
      "strrefsegment TCAGGAGGCCTTCACCCTC\n",
      "var next C\n",
      "ref next C\n",
      "var next T\n",
      "ref next T\n",
      "var next C\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "strnextvarsegment CTCA\n",
      "strnextrefsegment CTCA\n",
      "1 -- P002-BRCA1-VAR05.fasta\n",
      "\n",
      "\n",
      " Variant#1 Variant:c.0010C>T##BB --- matched 1\n",
      "in rule verification 1----------------------c.0010C>T##BB\n",
      "10\n",
      "C\n",
      "T\n",
      "BB\n",
      "var head offset 1--0\n",
      "C\n",
      "C\n",
      "\n",
      "\n",
      " Variant#2 Variant:c.0005_0008del##LB --- matched 2\n",
      "in rule verification 2----------------------c.0005_0008del##LB\n",
      "5\n",
      "8\n",
      "LB\n",
      "var head offset 2--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var T\n",
      "ref T\n",
      "strvarsegment GACT\n",
      "strrefsegment GACT\n",
      "var next G\n",
      "ref next T\n",
      "var next A\n",
      "ref next C\n",
      "var next C\n",
      "ref next C\n",
      "var next T\n",
      "ref next T\n",
      "strnextvarsegment GACT\n",
      "strnextrefsegment TCCT\n",
      "\n",
      "\n",
      " Variant#3 Variant:c.0009_0012delTCCT##PP --- matched 3\n",
      "in rule verification 3----------------------c.0009_0012delTCCT##PP\n",
      "9\n",
      "12\n",
      "TCCT\n",
      "PP\n",
      "var head offset 3--0\n",
      "4\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "var C\n",
      "ref C\n",
      "var T\n",
      "ref T\n",
      "strvarsegment TCCT\n",
      "strrefsegment TCCT\n",
      "var next T\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next C\n",
      "ref next A\n",
      "var next T\n",
      "ref next C\n",
      "strnextvarsegment TCCT\n",
      "strnextrefsegment GGAC\n",
      "strdel T\n",
      "ref T\n",
      "strdel C\n",
      "ref C\n",
      "strdel C\n",
      "ref C\n",
      "strdel T\n",
      "ref T\n",
      "\n",
      "\n",
      " Variant#4 Variant:c.0009_0012dup##LP --- matched 4\n",
      "in rule verification 4----------------------c.0009_0012dup##LP\n",
      "9\n",
      "12\n",
      "LP\n",
      "var head offset 4--0\n",
      "4\n",
      "var G\n",
      "ref T\n",
      "var G\n",
      "ref C\n",
      "var A\n",
      "ref C\n",
      "var C\n",
      "ref T\n",
      "strvarsegment GGAC\n",
      "strrefsegment TCCT\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next A\n",
      "var next G\n",
      "ref next C\n",
      "strnextvarsegment GGGG\n",
      "strnextrefsegment GGAC\n",
      "\n",
      "\n",
      " Variant#5 Variant:c.0014_0017dupGACG##NN --- matched 5\n",
      "in rule verification 5----------------------c.0014_0017dupGACG##NN\n",
      "14\n",
      "17\n",
      "GACG\n",
      "NN\n",
      "var head offset 5--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref A\n",
      "var G\n",
      "ref C\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GGGG\n",
      "strrefsegment GACG\n",
      "var next A\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next A\n",
      "ref next G\n",
      "strnextvarsegment AGGA\n",
      "strnextrefsegment GGGG\n",
      "strdup G\n",
      "ref G\n",
      "strdup A\n",
      "ref A\n",
      "strdup C\n",
      "ref C\n",
      "strdup G\n",
      "ref G\n",
      "\n",
      "\n",
      " Variant#6 Variant:c.0012_0013insATATAT##BB --- matched 6\n",
      "in rule verification 6----------------------c.0012_0013insATATAT##BB\n",
      "12\n",
      "13\n",
      "ATATAT\n",
      "BB\n",
      "var head offset 6--0\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GGACGG\n",
      "strrefsegment GGACGG\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next A\n",
      "var next A\n",
      "ref next C\n",
      "strnextvarsegment GGGA\n",
      "strnextrefsegment GGAC\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "strins A\n",
      "var A\n",
      "strins T\n",
      "var C\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "\n",
      "\n",
      " Variant#7 Variant:c.0009_0010delinsGGAA##LP --- matched 7\n",
      "in rule verification 7----------------------c.0009_0010delinsGGAA##LP\n",
      "9\n",
      "10\n",
      "GGAA\n",
      "LP\n",
      "var head offset 7--0\n",
      "2\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "strvarsegment TC\n",
      "strrefsegment TC\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next T\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "strnextvarsegment GGAC\n",
      "strnextrefsegment CTGG\n",
      "strdelins G\n",
      "var T\n",
      "strdelins G\n",
      "var C\n",
      "strdelins A\n",
      "var C\n",
      "strdelins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#8 Variant:c.0009_0010delTCinsGGAA##LP --- matched 8\n",
      "in rule verification 8 ----------------------c.0009_0010delTCinsGGAA##LP\n",
      "9\n",
      "10\n",
      "T\n",
      "C\n",
      "i\n",
      "TC\n",
      "GGAA\n",
      "LP\n",
      "var head offset 8--0\n",
      "2\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "strvarsegment TC\n",
      "strrefsegment TC\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next T\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "strnextvarsegment GGAC\n",
      "strnextrefsegment CTGG\n",
      "strdel T\n",
      "ref T\n",
      "strdel C\n",
      "ref C\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "strins G\n",
      "var T\n",
      "strins G\n",
      "var C\n",
      "strins A\n",
      "var C\n",
      "strins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#9 Variant:c.0021_0039inv##PP --- matched 9\n",
      "in rule verification 9 ----------------------c.0021_0039inv##PP\n",
      "21\n",
      "39\n",
      "PP\n",
      "var head offset 9--0\n",
      "19\n",
      "GAGGACCAGGCTGTGGGGT\n",
      "ACCCCACAGCCTGGTCCTC\n",
      "GACAGGCTGTGGGGTTTCT\n",
      "var A\n",
      "ref G\n",
      "var C\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var C\n",
      "ref A\n",
      "var C\n",
      "ref G\n",
      "var A\n",
      "ref G\n",
      "var C\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "var G\n",
      "ref G\n",
      "var C\n",
      "ref T\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref T\n",
      "var C\n",
      "ref T\n",
      "var T\n",
      "ref C\n",
      "var C\n",
      "ref T\n",
      "strvarsegment \n",
      "strrefsegment \n",
      "var next T\n",
      "ref next C\n",
      "var next T\n",
      "ref next A\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next A\n",
      "strnextvarsegment TTCT\n",
      "strnextrefsegment CAGA\n",
      "\n",
      "\n",
      " Variant#10 Variant:c.0021_0039con0061_0079##LP --- matched 10\n",
      "in rule verification 10 ----------------------c.0021_0039con0061_0079##LP\n",
      "21\n",
      "39\n",
      "61\n",
      "79\n",
      "LP\n",
      "var head offset 10--0\n",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n",
      "19\n",
      "19\n",
      "var G\n",
      "refcon T\n",
      "var A\n",
      "refcon C\n",
      "var G\n",
      "refcon A\n",
      "var G\n",
      "refcon G\n",
      "var A\n",
      "refcon G\n",
      "var C\n",
      "refcon A\n",
      "var C\n",
      "refcon G\n",
      "var A\n",
      "refcon G\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var C\n",
      "refcon T\n",
      "var T\n",
      "refcon T\n",
      "var G\n",
      "refcon C\n",
      "var T\n",
      "refcon A\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon T\n",
      "var T\n",
      "refcon C\n",
      "strvarsegment GAGGACCAGGCTGTGGGGT\n",
      "strrefsegment TCAGGAGGCCTTCACCCTC\n",
      "var next T\n",
      "ref next C\n",
      "var next T\n",
      "ref next A\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next A\n",
      "strnextvarsegment TTCT\n",
      "strnextrefsegment CAGA\n",
      "\n",
      "\n",
      " Variant#11 Variant:c.0020G>T##BB --- matched 1\n",
      "in rule verification 1----------------------c.0020G>T##BB\n",
      "20\n",
      "G\n",
      "T\n",
      "BB\n",
      "var head offset 1--0\n",
      "G\n",
      "G\n",
      "\n",
      "\n",
      " Variant#12 Variant:c.0015_0018del##LB --- matched 2\n",
      "in rule verification 2----------------------c.0015_0018del##LB\n",
      "15\n",
      "18\n",
      "LB\n",
      "var head offset 2--0\n",
      "4\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment ACGG\n",
      "strrefsegment ACGG\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next A\n",
      "strnextvarsegment ACGG\n",
      "strnextrefsegment GGGA\n",
      "\n",
      "\n",
      " Variant#13 Variant:c.0019_0022delGGGA##PP --- matched 3\n",
      "in rule verification 3----------------------c.0019_0022delGGGA##PP\n",
      "19\n",
      "22\n",
      "GGGA\n",
      "PP\n",
      "var head offset 3--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var A\n",
      "ref A\n",
      "strvarsegment GGGA\n",
      "strrefsegment GGGA\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next A\n",
      "var next G\n",
      "ref next G\n",
      "var next A\n",
      "ref next G\n",
      "strnextvarsegment GGGA\n",
      "strnextrefsegment CAGG\n",
      "strdel G\n",
      "ref G\n",
      "strdel G\n",
      "ref G\n",
      "strdel G\n",
      "ref G\n",
      "strdel A\n",
      "ref A\n",
      "\n",
      "\n",
      " Variant#14 Variant:c.0019_0022dup##LP --- matched 4\n",
      "in rule verification 4----------------------c.0019_0022dup##LP\n",
      "19\n",
      "22\n",
      "LP\n",
      "var head offset 4--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var A\n",
      "ref G\n",
      "var C\n",
      "ref A\n",
      "strvarsegment GGAC\n",
      "strrefsegment GGGA\n",
      "var next C\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "strnextvarsegment CAGG\n",
      "strnextrefsegment CAGG\n",
      "\n",
      "\n",
      " Variant#15 Variant:c.0024_0027dupGACG##NN --- matched 5\n",
      "in rule verification 5----------------------c.0024_0027dupGACG##NN\n",
      "24\n",
      "27\n",
      "GACG\n",
      "NN\n",
      "var head offset 5--0\n",
      "4\n",
      "var A\n",
      "ref A\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var C\n",
      "ref C\n",
      "strvarsegment AGGC\n",
      "strrefsegment AGGC\n",
      "var next T\n",
      "ref next T\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next T\n",
      "var next G\n",
      "ref next G\n",
      "strnextvarsegment TGTG\n",
      "strnextrefsegment TGTG\n",
      "strdup G\n",
      "ref A\n",
      "strdup A\n",
      "ref G\n",
      "strdup C\n",
      "ref G\n",
      "strdup G\n",
      "ref C\n",
      "\n",
      "\n",
      " Variant#16 Variant:c.0022_0023insATATAT##BB --- matched 6\n",
      "in rule verification 6----------------------c.0022_0023insATATAT##BB\n",
      "22\n",
      "23\n",
      "ATATAT\n",
      "BB\n",
      "var head offset 6--0\n",
      "2\n",
      "var G\n",
      "ref C\n",
      "var G\n",
      "ref A\n",
      "var A\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "strvarsegment GGACCA\n",
      "strrefsegment CAGGCT\n",
      "var next G\n",
      "ref next C\n",
      "var next G\n",
      "ref next A\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "strnextvarsegment GGCT\n",
      "strnextrefsegment CAGG\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "strins A\n",
      "var A\n",
      "strins T\n",
      "var C\n",
      "strins A\n",
      "var C\n",
      "strins T\n",
      "var A\n",
      "\n",
      "\n",
      " Variant#17 Variant:c.0019_0020delinsGGAA##LP --- matched 7\n",
      "in rule verification 7----------------------c.0019_0020delinsGGAA##LP\n",
      "19\n",
      "20\n",
      "GGAA\n",
      "LP\n",
      "var head offset 7--0\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GG\n",
      "strrefsegment GG\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next A\n",
      "var next A\n",
      "ref next C\n",
      "var next C\n",
      "ref next A\n",
      "strnextvarsegment GGAC\n",
      "strnextrefsegment GACA\n",
      "strdelins G\n",
      "var G\n",
      "strdelins G\n",
      "var G\n",
      "strdelins A\n",
      "var G\n",
      "strdelins A\n",
      "var A\n",
      "\n",
      "\n",
      " Variant#18 Variant:c.0019_0020delTCinsGGAA##LP --- matched 8\n",
      "in rule verification 8 ----------------------c.0019_0020delTCinsGGAA##LP\n",
      "19\n",
      "20\n",
      "T\n",
      "C\n",
      "i\n",
      "TC\n",
      "GGAA\n",
      "LP\n",
      "var head offset 8--0\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GG\n",
      "strrefsegment GG\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next A\n",
      "var next A\n",
      "ref next C\n",
      "var next C\n",
      "ref next A\n",
      "strnextvarsegment GGAC\n",
      "strnextrefsegment GACA\n",
      "strdel T\n",
      "ref G\n",
      "strdel C\n",
      "ref G\n",
      "strins G\n",
      "var G\n",
      "strins G\n",
      "var G\n",
      "strins A\n",
      "var G\n",
      "strins A\n",
      "var A\n",
      "\n",
      "\n",
      " Variant#19 Variant:c.0031_0049inv##PP --- matched 9\n",
      "in rule verification 9 ----------------------c.0031_0049inv##PP\n",
      "31\n",
      "49\n",
      "PP\n",
      "var head offset 9--0\n",
      "19\n",
      "CTGTGGGGTTTCTCAGATA\n",
      "TATCTGAGAAACCCCACAG\n",
      "GGGGTTTCTCAGATAACTG\n",
      "var T\n",
      "ref G\n",
      "var A\n",
      "ref G\n",
      "var T\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var G\n",
      "ref T\n",
      "var A\n",
      "ref T\n",
      "var G\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "var A\n",
      "ref C\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref A\n",
      "var C\n",
      "ref T\n",
      "var C\n",
      "ref A\n",
      "var A\n",
      "ref A\n",
      "var C\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "var G\n",
      "ref G\n",
      "strvarsegment \n",
      "strrefsegment \n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next C\n",
      "var next G\n",
      "ref next C\n",
      "strnextvarsegment ACTG\n",
      "strnextrefsegment GGCC\n",
      "\n",
      "\n",
      " Variant#20 Variant:c.0031_0049con0061_0079##LP --- matched 10\n",
      "in rule verification 10 ----------------------c.0031_0049con0061_0079##LP\n",
      "31\n",
      "49\n",
      "61\n",
      "79\n",
      "LP\n",
      "var head offset 10--0\n",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n",
      "19\n",
      "19\n",
      "var C\n",
      "refcon T\n",
      "var T\n",
      "refcon C\n",
      "var G\n",
      "refcon A\n",
      "var T\n",
      "refcon G\n",
      "var G\n",
      "refcon G\n",
      "var G\n",
      "refcon A\n",
      "var G\n",
      "refcon G\n",
      "var G\n",
      "refcon G\n",
      "var T\n",
      "refcon C\n",
      "var T\n",
      "refcon C\n",
      "var T\n",
      "refcon T\n",
      "var C\n",
      "refcon T\n",
      "var T\n",
      "refcon C\n",
      "var C\n",
      "refcon A\n",
      "var A\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var A\n",
      "refcon C\n",
      "var T\n",
      "refcon T\n",
      "var A\n",
      "refcon C\n",
      "strvarsegment CTGTGGGGTTTCTCAGATA\n",
      "strrefsegment TCAGGAGGCCTTCACCCTC\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next T\n",
      "ref next C\n",
      "var next G\n",
      "ref next C\n",
      "strnextvarsegment ACTG\n",
      "strnextrefsegment GGCC\n",
      "\n",
      "\n",
      " Variant#21 Variant:c.0030C>T##BB --- matched 1\n",
      "in rule verification 1----------------------c.0030C>T##BB\n",
      "30\n",
      "C\n",
      "T\n",
      "BB\n",
      "var head offset 1--0\n",
      "G\n",
      "T\n",
      "\n",
      "\n",
      " Variant#22 Variant:c.0025_0028del##LB --- matched 2\n",
      "in rule verification 2----------------------c.0025_0028del##LB\n",
      "25\n",
      "28\n",
      "LB\n",
      "var head offset 2--0\n",
      "4\n",
      "var A\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "strvarsegment ACCA\n",
      "strrefsegment GGCT\n",
      "var next A\n",
      "ref next G\n",
      "var next C\n",
      "ref next T\n",
      "var next C\n",
      "ref next G\n",
      "var next A\n",
      "ref next G\n",
      "strnextvarsegment ACCA\n",
      "strnextrefsegment GTGG\n",
      "\n",
      "\n",
      " Variant#23 Variant:c.0029_0032delTCCT##PP --- matched 3\n",
      "in rule verification 3----------------------c.0029_0032delTCCT##PP\n",
      "29\n",
      "32\n",
      "TCCT\n",
      "PP\n",
      "var head offset 3--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref T\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref G\n",
      "strvarsegment GGCT\n",
      "strrefsegment GTGG\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next C\n",
      "ref next T\n",
      "var next T\n",
      "ref next T\n",
      "strnextvarsegment GGCT\n",
      "strnextrefsegment GGTT\n",
      "strdel T\n",
      "ref G\n",
      "strdel C\n",
      "ref T\n",
      "strdel C\n",
      "ref G\n",
      "strdel T\n",
      "ref G\n",
      "\n",
      "\n",
      " Variant#24 Variant:c.0029_0032dup##LP --- matched 4\n",
      "in rule verification 4----------------------c.0029_0032dup##LP\n",
      "29\n",
      "32\n",
      "LP\n",
      "var head offset 4--0\n",
      "4\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "strvarsegment GTGG\n",
      "strrefsegment GTGG\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next T\n",
      "var next T\n",
      "ref next T\n",
      "strnextvarsegment GGTT\n",
      "strnextrefsegment GGTT\n",
      "c.0029_0032dup##LP      PRESENT           ******************\n",
      "\n",
      "\n",
      " Variant#25 Variant:c.0034_0037dupGACG##NN --- matched 5\n",
      "in rule verification 5----------------------c.0034_0037dupGACG##NN\n",
      "34\n",
      "37\n",
      "GACG\n",
      "NN\n",
      "var head offset 5--4\n",
      "4\n",
      "var C\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref T\n",
      "var A\n",
      "ref T\n",
      "strvarsegment CTCA\n",
      "strrefsegment GTTT\n",
      "var next G\n",
      "ref next C\n",
      "var next A\n",
      "ref next T\n",
      "var next T\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "strnextvarsegment GATA\n",
      "strnextrefsegment CTCA\n",
      "strdup G\n",
      "ref G\n",
      "strdup A\n",
      "ref T\n",
      "strdup C\n",
      "ref T\n",
      "strdup G\n",
      "ref T\n",
      "\n",
      "\n",
      " Variant#26 Variant:c.0032_0033insATATAT##BB --- matched 6\n",
      "in rule verification 6----------------------c.0032_0033insATATAT##BB\n",
      "32\n",
      "33\n",
      "ATATAT\n",
      "BB\n",
      "var head offset 6--4\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "var T\n",
      "ref T\n",
      "var T\n",
      "ref T\n",
      "var C\n",
      "ref C\n",
      "strvarsegment GGTTTC\n",
      "strrefsegment GGTTTC\n",
      "var next T\n",
      "ref next G\n",
      "var next C\n",
      "ref next G\n",
      "var next A\n",
      "ref next T\n",
      "var next G\n",
      "ref next T\n",
      "strnextvarsegment TCAG\n",
      "strnextrefsegment GGTT\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var T\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "strins A\n",
      "var G\n",
      "strins T\n",
      "var G\n",
      "\n",
      "\n",
      " Variant#27 Variant:c.0029_0030delinsGGAA##LP --- matched 7\n",
      "in rule verification 7----------------------c.0029_0030delinsGGAA##LP\n",
      "29\n",
      "30\n",
      "GGAA\n",
      "LP\n",
      "var head offset 7--4\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "strvarsegment GT\n",
      "strrefsegment GT\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "strnextvarsegment GGTT\n",
      "strnextrefsegment GGGG\n",
      "strdelins G\n",
      "var G\n",
      "strdelins G\n",
      "var G\n",
      "strdelins A\n",
      "var C\n",
      "strdelins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#28 Variant:c.0029_0030delTCinsGGAA##LP --- matched 8\n",
      "in rule verification 8 ----------------------c.0029_0030delTCinsGGAA##LP\n",
      "29\n",
      "30\n",
      "T\n",
      "C\n",
      "i\n",
      "TC\n",
      "GGAA\n",
      "LP\n",
      "var head offset 8--4\n",
      "2\n",
      "var G\n",
      "ref G\n",
      "var T\n",
      "ref T\n",
      "strvarsegment GT\n",
      "strrefsegment GT\n",
      "var next G\n",
      "ref next G\n",
      "var next G\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "var next T\n",
      "ref next G\n",
      "strnextvarsegment GGTT\n",
      "strnextrefsegment GGGG\n",
      "strdel T\n",
      "ref G\n",
      "strdel C\n",
      "ref T\n",
      "strins G\n",
      "var G\n",
      "strins G\n",
      "var G\n",
      "strins A\n",
      "var C\n",
      "strins A\n",
      "var T\n",
      "\n",
      "\n",
      " Variant#29 Variant:c.0041_0059inv##PP --- matched 9\n",
      "in rule verification 9 ----------------------c.0041_0059inv##PP\n",
      "41\n",
      "59\n",
      "PP\n",
      "var head offset 9--4\n",
      "19\n",
      "AGATAACTGGGCCCCTGCG\n",
      "CGCAGGGGCCCAGTTATCT\n",
      "AGATAACTGGGCCCCTGCG\n",
      "var C\n",
      "ref A\n",
      "var G\n",
      "ref G\n",
      "var C\n",
      "ref A\n",
      "var A\n",
      "ref T\n",
      "var G\n",
      "ref A\n",
      "var G\n",
      "ref A\n",
      "var G\n",
      "ref C\n",
      "var G\n",
      "ref T\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var C\n",
      "ref G\n",
      "var A\n",
      "ref C\n",
      "var G\n",
      "ref C\n",
      "var T\n",
      "ref C\n",
      "var T\n",
      "ref C\n",
      "var A\n",
      "ref T\n",
      "var T\n",
      "ref G\n",
      "var C\n",
      "ref C\n",
      "var T\n",
      "ref G\n",
      "strvarsegment \n",
      "strrefsegment \n",
      "var next C\n",
      "ref next C\n",
      "var next T\n",
      "ref next T\n",
      "var next C\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "strnextvarsegment CTCA\n",
      "strnextrefsegment CTCA\n",
      "\n",
      "\n",
      " Variant#30 Variant:c.0041_0059con0061_0079##LP --- matched 10\n",
      "in rule verification 10 ----------------------c.0041_0059con0061_0079##LP\n",
      "41\n",
      "59\n",
      "61\n",
      "79\n",
      "LP\n",
      "var head offset 10--4\n",
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n",
      "19\n",
      "19\n",
      "var A\n",
      "refcon T\n",
      "var G\n",
      "refcon C\n",
      "var A\n",
      "refcon A\n",
      "var T\n",
      "refcon G\n",
      "var A\n",
      "refcon G\n",
      "var A\n",
      "refcon A\n",
      "var C\n",
      "refcon G\n",
      "var T\n",
      "refcon G\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var G\n",
      "refcon T\n",
      "var C\n",
      "refcon T\n",
      "var C\n",
      "refcon C\n",
      "var C\n",
      "refcon A\n",
      "var C\n",
      "refcon C\n",
      "var T\n",
      "refcon C\n",
      "var G\n",
      "refcon C\n",
      "var C\n",
      "refcon T\n",
      "var G\n",
      "refcon C\n",
      "strvarsegment AGATAACTGGGCCCCTGCG\n",
      "strrefsegment TCAGGAGGCCTTCACCCTC\n",
      "var next C\n",
      "ref next C\n",
      "var next T\n",
      "ref next T\n",
      "var next C\n",
      "ref next C\n",
      "var next A\n",
      "ref next A\n",
      "strnextvarsegment CTCA\n",
      "strnextrefsegment CTCA\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "netdeletes=0\n",
    "netinserts=0\n",
    "netduplicates=0\n",
    "\n",
    "global var_seq_record\n",
    "global ref_seq_record\n",
    "\n",
    "file1 = open('BRCA1-VARIANTS.txt', 'r') \n",
    "Variants = file1.readlines() \n",
    "\n",
    "for root, dirs, files in os.walk(dirpath):\n",
    "    for filename in files:\n",
    "            print(filename)\n",
    "            testfilecount+=1\n",
    "            testfilenames.append(filename)\n",
    "\n",
    "print(testfilecount)\n",
    "for i in range(testfilecount):\n",
    "    print(str(i) + \" -- \" + testfilenames[i])\n",
    "    var_seq_record = SeqIO.read(dirpath+testfilenames[i], \"fasta\")\n",
    "    reportlines.append(\"--------------------------------------------------------------------------------------------------------------------------\")\n",
    "    reportlines.append(\"For file:   \" + testfilenames[i])\n",
    "    reportlines.append(var_seq_record.seq[:20]+'|'+var_seq_record.seq[20:40]+'|'+var_seq_record.seq[40:60]+'|'+var_seq_record.seq[60:80]+'|'+var_seq_record.seq[80:100])\n",
    "    reportlines.append(ref_seq_record.seq[:20]+'|'+ref_seq_record.seq[20:40]+'|'+ref_seq_record.seq[40:60]+'|'+ref_seq_record.seq[60:80]+'|'+ref_seq_record.seq[80:100])\n",
    "    reportlines.append(\"--------------------------------------------------------------------------------------------------------------------------\")\n",
    "    varheadoffset = 0\n",
    "    count = 0\n",
    "    # Strips the newline character \n",
    "    for variant in Variants: \n",
    "        #print(\"Line {}: {}\".format(count+1, variant.strip()))\n",
    "        checkvariantexists(count+1, variant.strip() )\n",
    "        count+=1\n",
    "        \n",
    "reportlines.append(\"--------------------------------------------------------------------------------------------------------------------------\")\n",
    "reportlines.append(\"===============================================END OF GENOMICS REPORT=====================================================\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           KAIGENIX CLINICAL MANAGEMENT - GENOMICS REPORT                           \n",
      "                                   Variation Examination Report\n",
      "                                    \n",
      "Details:\n",
      "--------------------------------------------------------------------------------------------------------------------------\n",
      "--------------------------------------------------------------------------------------------------------------------------\n",
      "For file:   P002-BRCA1-VAR03.fasta\n",
      "GCTGAGACTTCCTGGACGGC|AGGCTGTGGGGTTTCTCAGA|TAACTGGGCCCCTGCGCTCA|GGAGGCCTTCACCCTCTGCT|CTGGGTAAAGTTCATTGGAA\n",
      "GCTGAGACTTCCTGGACGGG|GGACAGGCTGTGGGGTTTCT|CAGATAACTGGGCCCCTGCG|CTCAGGAGGCCTTCACCCTC|TGCTCTGGGTAAAGTTCATT\n",
      "--------------------------------------------------------------------------------------------------------------------------\n",
      "VARIANT -- c.0010C>T##BB                            -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0005_0008del##LB                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0012delTCCT##PP                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0012dup##LP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0014_0017dupGACG##NN                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0012_0013insATATAT##BB                 -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0010delinsGGAA##LP                -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0010delTCinsGGAA##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0021_0039inv##PP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0021_0039con0061_0079##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0020G>T##BB                            -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0015_0018del##LB                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0019_0022delGGGA##PP                   -- PRESENT                    Diagnosis: PATHOLOGICAL\n",
      "VARIANT -- c.0019_0022dup##LP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0024_0027dupGACG##NN                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0022_0023insATATAT##BB                 -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0019_0020delinsGGAA##LP                -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0019_0020delTCinsGGAA##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0031_0049inv##PP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0031_0049con0061_0079##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0030C>T##BB                            -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0025_0028del##LB                       -- PRESENT                    Diagnosis: LIKELY BENIGN\n",
      "VARIANT -- c.0029_0032delTCCT##PP                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0029_0032dup##LP                       -- PRESENT                    Diagnosis: LIKELY PATHOLOGICAL\n",
      "VARIANT -- c.0034_0037dupGACG##NN                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0032_0033insATATAT##BB                 -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0029_0030delinsGGAA##LP                -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0029_0030delTCinsGGAA##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0041_0059inv##PP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0041_0059con0061_0079##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "--------------------------------------------------------------------------------------------------------------------------\n",
      "For file:   P002-BRCA1-VAR05.fasta\n",
      "GCTGAGACTTCCTGGACGGG|GGAGGACCAGGCTGTGGGGT|TTCTCAGATAACTGGGCCCC|TGCGCTCAGGAGGCCTTCAC|CCTCTGCTCTGGGTAAAGTT\n",
      "GCTGAGACTTCCTGGACGGG|GGACAGGCTGTGGGGTTTCT|CAGATAACTGGGCCCCTGCG|CTCAGGAGGCCTTCACCCTC|TGCTCTGGGTAAAGTTCATT\n",
      "--------------------------------------------------------------------------------------------------------------------------\n",
      "VARIANT -- c.0010C>T##BB                            -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0005_0008del##LB                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0012delTCCT##PP                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0012dup##LP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0014_0017dupGACG##NN                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0012_0013insATATAT##BB                 -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0010delinsGGAA##LP                -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0009_0010delTCinsGGAA##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0021_0039inv##PP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0021_0039con0061_0079##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0020G>T##BB                            -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0015_0018del##LB                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0019_0022delGGGA##PP                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0019_0022dup##LP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0024_0027dupGACG##NN                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0022_0023insATATAT##BB                 -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0019_0020delinsGGAA##LP                -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0019_0020delTCinsGGAA##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0031_0049inv##PP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0031_0049con0061_0079##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0030C>T##BB                            -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0025_0028del##LB                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0029_0032delTCCT##PP                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0029_0032dup##LP                       -- PRESENT                    Diagnosis: LIKELY PATHOLOGICAL\n",
      "VARIANT -- c.0034_0037dupGACG##NN                   -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0032_0033insATATAT##BB                 -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0029_0030delinsGGAA##LP                -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0029_0030delTCinsGGAA##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0041_0059inv##PP                       -- NOT PRESENT                Diagnosis: N/A\n",
      "VARIANT -- c.0041_0059con0061_0079##LP              -- NOT PRESENT                Diagnosis: N/A\n",
      "--------------------------------------------------------------------------------------------------------------------------\n",
      "===============================================END OF GENOMICS REPORT=====================================================\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(reportlines)):\n",
    "        print(reportlines[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
